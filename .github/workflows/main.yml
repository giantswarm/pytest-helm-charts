name: build

on:
  pull_request:
    branches:
      - master
  create:
    tags:
      - '*'

jobs:
  release:
    needs: test
    runs-on: ubuntu-latest
    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: Python check version
      run: python --version
    - name: Install poetry
      uses: Gr1N/setup-poetry@v2
    - name: Release on pypi
      run: poetry publish --build

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python check version
      run: python --version
    - name: Install poetry
      uses: Gr1N/setup-poetry@v2
    - name: Poetry check version
      run: poetry --version
    - name: Restore poetry cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
    - name: Poetry install dependencies
      run: poetry install
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Verify types with mypy
      run: poetry run mypy pytest_helm_charts
    - name: Run pytest
      run: poetry run python -m pytest --cov=./ --cov-report=xml --log-cli-level=info tests/
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        env_vars: OS,PYTHON
